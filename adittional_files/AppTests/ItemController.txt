package com.example.itemservice.controller;

import com.example.itemservice.domain.dto.ItemDto;
import com.example.itemservice.domain.model.Item;
import com.example.itemservice.domain.model.Status;
import com.example.itemservice.domain.model.User;
import com.example.itemservice.handlers.Operation;
import com.example.itemservice.service.ItemService;
import com.example.itemservice.service.UserService;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.AllArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;

@AllArgsConstructor
@RestController
@RequestMapping("/item")
public class ItemController {

    private final ItemService items;

    private final UserService persons;

    private static final Logger LOGGER = LoggerFactory.getLogger(ItemController.class.getSimpleName());

    private final ObjectMapper objectMapper;

    /*МЕТОДЫ USER-а:_______________________________________________________________________________*/

    /*Просмотреть список заявок  user-а с возможностью сортировки по дате создания в оба
   направления (как от самой старой к самой новой, так и наоборот) и пагинацией
   по 5 элементов, фильтрация по статусу ("hasRole('USER')")*/
    @GetMapping("/sortItemsByUser")
    @PreAuthorize("hasRole('USER')")
    public ResponseEntity<Page<Item>> findSortPageItemsByUser(
            @RequestParam(value = "sortDirection", defaultValue = "0")@Min(0) @Max(1) Integer sortDirection
    ) {
        User currentUser = persons.getCurrentUser();
        return findSortByConditionPageItemsIncludeUsers(0, 5,
                sortDirection == 0 ? "asc" : "desc",
                Status.Draft,
                List.of(persons.findUserByUsername(currentUser.getUsername())));
    }

   

    /*универсальный метод сортировки, включая USER-s List
    Просмотреть список заявок с возможностью сортировки по дате создания в оба
    направления (как от самой старой к самой новой, так и наоборот) и пагинацией
    по 5 элементов, фильтрация по статусу*/
    public ResponseEntity<Page<Item>> findSortByConditionPageItemsIncludeUsers(
            @RequestParam(value = "offset", defaultValue = "0")@Min(0) Integer offset,
            @RequestParam(value = "limit", defaultValue = "5")@Min(1) @Max(100) Integer limit,
            String direction,
            Status status,
            List<User> users
    ) {
        return  new ResponseEntity<>(items.findAllItemsByStatusAndUsers(
                PageRequest.of(offset, limit,
                        Sort.by((direction.equals("asc") ? Sort.Order.asc("created")
                                        : Sort.Order.desc("created")))),
                status,
                users),
                HttpStatus.OK);
    }

   

}




ОТВЕТ:

Для написания теста для метода `findSortPageItemsByUser` контроллера `ItemController`,
 который использует Spring и JUnit, вам потребуется создать юнит-тест, который будет проверять корректность работы этого метода.
 Мы будем использовать Mockito для мокирования зависимостей.

Вот пример теста для данного метода:

Java


package com.example.itemservice.controller;

import com.example.itemservice.domain.dto.ItemDto;
import com.example.itemservice.domain.model.Item;
import com.example.itemservice.domain.model.Status;
import com.example.itemservice.domain.model.User;
import com.example.itemservice.service.ItemService;
import com.example.itemservice.service.UserService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.Collections;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@SpringBootTest
@AutoConfigureMockMvc
class ItemControllerTest {

    @Autowired
    private ItemController itemController;

    private ItemService itemService;
    private UserService userService;

    @BeforeEach
    void setUp() {
        itemService = Mockito.mock(ItemService.class);
        userService = Mockito.mock(UserService.class);
        itemController = new ItemController(itemService, userService, null);  // null для ObjectMapper
    }

    @Test
    @WithMockUser(roles = "USER")
    void testFindSortPageItemsByUser() {
        // Arrange
        User mockUser = new User();  // Создаем макет пользователя
        mockUser.setUsername("testUser");
        
        when(userService.getCurrentUser()).thenReturn(mockUser);

        Item mockItem = new Item();  // Создаем макет элемента
        // Настройка mockItem...

        Page<Item> mockPage = new PageImpl<>(Collections.singletonList(mockItem));
        when(itemService.findAllItemsByStatusAndUsers(any(), eq(Status.Draft), any()))
                .thenReturn(mockPage);

        // Act
        ResponseEntity<Page<Item>> response = itemController.findSortPageItemsByUser(0);

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(mockPage, response.getBody());

        verify(userService, times(1)).getCurrentUser();
        verify(itemService, times(1)).findAllItemsByStatusAndUsers(any(), eq(Status.Draft), any());
    }
}


### Пояснения:
1. **Mock объектов**: Мы используем `Mockito` для создания моков `ItemService` и `UserService`, чтобы изолировать тестируемый метод от реальной логики сервисов.

2. **Тест с аннотацией `@WithMockUser`**: Это позволяет нам эмулировать авторизацию пользователя с ролью `USER` для выполнения метода контроллера, который защищен аннотацией `@PreAuthorize`.

3. **Протестированный метод**: Вызываем метод `findSortPageItemsByUser` с параметром `sortDirection`.

4. **Assertions**: Проверяем, что возвращаемый статус ответа `HttpStatus.OK` и что тело ответа соответствует ожидаемым данным.

5. **Verify**: Проверяем, что методы `getCurrentUser` и `findAllItemsByStatusAndUsers` были вызваны один раз.

Это базовая структура теста. Пожалуйста, настройте тесты в соответствии с вашим фактическим кодом и бизнес-логикой!