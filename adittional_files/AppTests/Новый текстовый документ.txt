У меня сортировка реализована в контроллерах ниже, в приложении это работает,
 но в тесте нет - порядок сортировки при вызове в тесте контроллера findSortPageItemsByUser не меняется

//////// test :////////////////////////////////////////////////////////////////////////////////////////////////////////

package com.example.userservice;

import com.example.userservice.controller.ItemController;
import com.example.userservice.domain.model.Item;
import com.example.userservice.domain.model.Status;
import com.example.userservice.domain.model.User;
import com.example.userservice.service.ItemService;
import com.example.userservice.service.UserService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;

import java.time.LocalDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

import static com.example.userservice.domain.model.Role.ROLE_USER;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
public class ItemControllerTests {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ItemController itemController;

    private ItemService itemService;
    private UserService persons;

    @BeforeEach
    void setUp() {
        itemService = Mockito.mock(ItemService.class);
        persons = Mockito.mock(UserService.class);
        itemController = new ItemController(itemService, persons,
                /* null для ObjectMapper*/
                null);
    }

    /*Просмотреть список заявок  user-а с возможностью сортировки по дате создания в оба
  направления (как от самой старой к самой новой, так и наоборот) и пагинацией
  по 5 элементов, фильтрация по статусу ("hasRole('USER')")*/
    @Test
    @WithMockUser(roles = "USER")
    void findSortPageItemsByUserAsc() throws InterruptedException {

        /* Arrange*/

        /* Создаем макет пользователя*/
        User mockUser = new User(1, "testUser",
                "password", "testUser@mail.ru",
                "89212222222", List.of(ROLE_USER));

        when(persons.getCurrentUser()).thenReturn(mockUser);
        when(persons.findUserByUsername(mockUser.getUsername())).thenReturn(mockUser);

        /* Создаем макет элемента*/
        Item mockItem = new Item();
        mockItem.setId(1);
        mockItem.setName("Test Item");
        mockItem.setItemText("Test Item Text");
        mockItem.setStatus(Status.Draft);

        Thread.sleep(1000);

        Item mockItem2 = new Item();
        mockItem2.setId(2);
        mockItem2.setName("Test Item2");
        mockItem2.setItemText("Test Item2 Text");
        mockItem2.setStatus(Status.Draft);

        Thread.sleep(1000);

        Item mockItem3 = new Item();
        mockItem3.setId(3);
        mockItem3.setName("Test Item3");
        mockItem3.setItemText("Test Item3 Text");
        mockItem3.setStatus(Status.Draft);

        /* Настройка mockItem...*/

        Page<Item> mockPage = new PageImpl<>(List.of(mockItem, mockItem2, mockItem3));
        when(itemService.findAllItemsByStatusAndUsers(any(), eq(Status.Draft), any()))
                .thenReturn(mockPage);

        /* Act*/

        ResponseEntity<Page<Item>> response = itemController.findSortPageItemsByUser(0);

        /* Assert*/
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(mockPage, response.getBody());
        assertEquals("Test Item",
                Objects.requireNonNull(Objects.requireNonNull(response.getBody()).getContent().get(0).getName()));

        verify(persons, times(1)).getCurrentUser();
        verify(itemService, times(1)).findAllItemsByStatusAndUsers(any(), eq(Status.Draft), any());
    }
}

//////////controller :///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 @GetMapping("/sortItemsByUser")
    @PreAuthorize("hasRole('USER')")
    public ResponseEntity<Page<Item>> findSortPageItemsByUser(
            @RequestParam(value = "sortDirection", defaultValue = "0")@Min(0) @Max(1) Integer sortDirection
    ) {
        User currentUser = persons.getCurrentUser();
        return findSortByConditionPageItemsIncludeUsers(0, 5,
                sortDirection == 0 ? "asc" : "desc",
                Status.Draft,
                List.of(persons.findUserByUsername(currentUser.getUsername())));
    }

 /*универсальный метод сортировки, включая USER-s List
    Просмотреть список заявок с возможностью сортировки по дате создания в оба
    направления (как от самой старой к самой новой, так и наоборот) и пагинацией
    по 5 элементов, фильтрация по статусу*/
    public ResponseEntity<Page<Item>> findSortByConditionPageItemsIncludeUsers(
            @RequestParam(value = "offset", defaultValue = "0")@Min(0) Integer offset,
            @RequestParam(value = "limit", defaultValue = "5")@Min(1) @Max(100) Integer limit,
            String direction,
            Status status,
            List<User> users
    ) {
        return  new ResponseEntity<>(items.findAllItemsByStatusAndUsers(
                PageRequest.of(offset, limit,
                        Sort.by((direction.equals("asc") ? Sort.Order.asc("created")
                                        : Sort.Order.desc("created")))),
                status,
                users),
                HttpStatus.OK);
    }